{"version":3,"file":"static/js/902.afd15c1a.chunk.js","mappings":"iOAKMA,GAAeC,EAAAA,EAAAA,OAAK,kBACxB,qDADwB,IAGpBC,GAAiBD,EAAAA,EAAAA,OAAK,kBAC1B,6BAD0B,IAItBE,EAAiB,SAAAC,GACrBC,QAAQC,IAAI,UAAWF,EACxB,EAgFD,UA9Ec,WACZ,OAA+BG,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UAEXC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,iCACE,UAAC,IAAD,CAEEC,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,MAAO,CACLC,SAAU,IACVC,UAAW,IAEbC,cAAe,CACbC,UAAU,GAEZC,SA5BW,SAAAC,GACfZ,GACEa,EAAAA,EAAAA,IAAM,CACJC,MAAOF,EAAOE,MACdC,SAAUH,EAAOG,WAItB,EAqBKtB,eAAgBA,EAChBuB,aAAa,MAlBf,WAoBE,SAAC,SAAD,CACEC,MAAM,QACNf,KAAK,QACLgB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCANf,UAUE,SAAC,IAAD,CAAOC,KAAK,QAAQC,YAAY,kCAGlC,SAAC,SAAD,CACEL,MAAM,WACNf,KAAK,WACLgB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCANf,UAUE,SAAC,aAAD,CAAgBG,UAAW,OAG7B,SAAC,SAAD,CACElB,WAAY,CACVmB,OAAQ,EACRpB,KAAM,IAHV,UAME,SAAC,KAAD,CAAQiB,KAAK,UAAUI,SAAS,SAAhC,SAAyC,kBAK5C3B,IAAW,SAACR,EAAD,IACXS,IAAa,SAACP,EAAD,MAGnB,C,+EC1FYK,EAAqB,WAIhC,MAAO,CACLC,SAJc4B,EAAAA,EAAAA,IAAYC,EAAAA,IAK1B5B,WAJgB2B,EAAAA,EAAAA,IAAYE,EAAAA,IAM/B,C","sources":["components/pages/login/Login.js","hooks/useLoadingAndError.js"],"sourcesContent":["import { Button, Form, Input } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'features/auth/operations';\nimport { useLoadingAndError } from 'hooks/useLoadingAndError';\nimport { lazy } from 'react';\nconst ErrorMessage = lazy(() =>\n  import('components/error-message/ErrorMessage')\n);\nconst LoadingSpinner = lazy(() =>\n  import('components/loading-spinner/LoadingSpinner')\n);\n\nconst onFinishFailed = errorInfo => {\n  console.log('Failed:', errorInfo);\n};\n\nconst Login = () => {\n  const { isError, isLoading } = useLoadingAndError();\n  // const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const onFinish = values => {\n    dispatch(\n      login({\n        email: values.email,\n        password: values.password,\n      })\n    );\n    // form.resetFields();\n  };\n\n  return (\n    <>\n      <Form\n        // form={form}\n        name=\"basic\"\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 16,\n        }}\n        style={{\n          maxWidth: 600,\n          marginTop: 30,\n        }}\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your email address!',\n            },\n          ]}\n        >\n          <Input type=\"email\" placeholder=\"Please type email address!\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password minLength={8} />\n        </Form.Item>\n\n        <Form.Item\n          wrapperCol={{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n      {isError && <ErrorMessage />}\n      {isLoading && <LoadingSpinner />}\n    </>\n  );\n};\nexport default Login;\n","import { useSelector } from 'react-redux';\nimport { selectIsError, selectIsLoading } from 'features/auth/selectors';\n\nexport const useLoadingAndError = () => {\n  const isError = useSelector(selectIsError);\n  const isLoading = useSelector(selectIsLoading);\n\n  return {\n    isError,\n    isLoading,\n  };\n};\n"],"names":["ErrorMessage","lazy","LoadingSpinner","onFinishFailed","errorInfo","console","log","useLoadingAndError","isError","isLoading","dispatch","useDispatch","name","labelCol","span","wrapperCol","style","maxWidth","marginTop","initialValues","remember","onFinish","values","login","email","password","autoComplete","label","rules","required","message","type","placeholder","minLength","offset","htmlType","useSelector","selectIsError","selectIsLoading"],"sourceRoot":""}